{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport { getData } from \"../Test\";\nexport const ForecastContext = /*#__PURE__*/createContext();\nexport const ForecastProvider = ({\n  children\n}) => {\n  _s();\n\n  const [lang, setLang] = useState(\"tr\");\n  const [localSuf, setLocalSuf] = useState(\"tr-TR\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState([]);\n  console.log(\"fres\", resArray);\n  const APIKEY = process.env.REACT_APP_API_KEY;\n\n  const langHandler = () => {\n    if (lang === \"tr\") {\n      setLang(\"en\");\n      setLocalSuf(\"en-EN\");\n    } else if (lang === \"en\") {\n      setLang(\"tr\");\n      setLocalSuf(\"tr-TR\");\n    }\n  };\n\n  const todayData = weatherData;\n  const myDate = new Date();\n  console.log(\"This is it :\", myDate.toLocaleString({\n    localSuf\n  }, {\n    weekday: \"long\"\n  }));\n  const langText = lang.toUpperCase();\n  const values = {\n    lang,\n    setLang,\n    localSuf,\n    setLocalSuf,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData,\n    langHandler,\n    langText,\n    todayData,\n    getData,\n    resArray\n  };\n  useEffect(() => {\n    setWeatherData(getData(city, lang, APIKEY));\n  }, [city, lang]);\n  console.log(\"iştebu:\", weatherData);\n  return /*#__PURE__*/_jsxDEV(ForecastContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForecastProvider, \"QfW4puMizHkON6n0cEou2H2gjRE=\");\n\n_c = ForecastProvider;\nexport default ForecastContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastProvider\");","map":{"version":3,"sources":["/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js"],"names":["createContext","useState","useEffect","getData","ForecastContext","ForecastProvider","children","lang","setLang","localSuf","setLocalSuf","city","setCity","weatherData","setWeatherData","console","log","resArray","APIKEY","process","env","REACT_APP_API_KEY","langHandler","todayData","myDate","Date","toLocaleString","weekday","langText","toUpperCase","values"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,EAArC;AAEP,OAAO,MAAMK,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,OAAD,CAAxC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,QAApB;AACA,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIf,IAAI,KAAK,IAAb,EAAmB;AACjBC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,MAAAA,WAAW,CAAC,OAAD,CAAX;AACD,KAHD,MAGO,IAAIH,IAAI,KAAK,IAAb,EAAmB;AACxBC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,MAAAA,WAAW,CAAC,OAAD,CAAX;AACD;AACF,GARD;;AAUA,QAAMa,SAAS,GAAGV,WAAlB;AAEA,QAAMW,MAAM,GAAG,IAAIC,IAAJ,EAAf;AACAV,EAAAA,OAAO,CAACC,GAAR,CACE,cADF,EAEEQ,MAAM,CAACE,cAAP,CACE;AAAEjB,IAAAA;AAAF,GADF,EAEE;AACEkB,IAAAA,OAAO,EAAE;AADX,GAFF,CAFF;AAUA,QAAMC,QAAQ,GAAGrB,IAAI,CAACsB,WAAL,EAAjB;AAEA,QAAMC,MAAM,GAAG;AACbvB,IAAAA,IADa;AAEbC,IAAAA,OAFa;AAGbC,IAAAA,QAHa;AAIbC,IAAAA,WAJa;AAKbC,IAAAA,IALa;AAMbC,IAAAA,OANa;AAObC,IAAAA,WAPa;AAQbC,IAAAA,cARa;AASbQ,IAAAA,WATa;AAUbM,IAAAA,QAVa;AAWbL,IAAAA,SAXa;AAYbpB,IAAAA,OAZa;AAabc,IAAAA;AAba,GAAf;AAgBAf,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc,CAACX,OAAO,CAACQ,IAAD,EAAOJ,IAAP,EAAaW,MAAb,CAAR,CAAd;AACD,GAFQ,EAEN,CAACP,IAAD,EAAOJ,IAAP,CAFM,CAAT;AAGAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,WAAvB;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEiB,MAAjC;AAAA,cACGxB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5DM;;GAAMD,gB;;KAAAA,gB;AA8Db,eAAeD,eAAf","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { getData } from \"../Test\";\nexport const ForecastContext = createContext();\n\nexport const ForecastProvider = ({ children }) => {\n  const [lang, setLang] = useState(\"tr\");\n  const [localSuf, setLocalSuf] = useState(\"tr-TR\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState([]);\n\n  console.log(\"fres\", resArray);\n  const APIKEY = process.env.REACT_APP_API_KEY;\n\n  const langHandler = () => {\n    if (lang === \"tr\") {\n      setLang(\"en\");\n      setLocalSuf(\"en-EN\");\n    } else if (lang === \"en\") {\n      setLang(\"tr\");\n      setLocalSuf(\"tr-TR\");\n    }\n  };\n\n  const todayData = weatherData;\n\n  const myDate = new Date();\n  console.log(\n    \"This is it :\",\n    myDate.toLocaleString(\n      { localSuf },\n      {\n        weekday: \"long\",\n      }\n    )\n  );\n\n  const langText = lang.toUpperCase();\n\n  const values = {\n    lang,\n    setLang,\n    localSuf,\n    setLocalSuf,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData,\n    langHandler,\n    langText,\n    todayData,\n    getData,\n    resArray,\n  };\n\n  useEffect(() => {\n    setWeatherData(getData(city, lang, APIKEY));\n  }, [city, lang]);\n  console.log(\"iştebu:\", weatherData);\n\n  return (\n    <ForecastContext.Provider value={values}>\n      {children}\n    </ForecastContext.Provider>\n  );\n};\n\nexport default ForecastContext;\n"]},"metadata":{},"sourceType":"module"}
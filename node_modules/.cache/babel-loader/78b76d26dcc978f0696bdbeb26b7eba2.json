{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js\",\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nconst ForecastContext = /*#__PURE__*/createContext(null);\nexport const ForecastProvider = ({\n  children\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [lang, setLang] = useState(\"tr\");\n  const [localSuf, setLocalSuf] = useState(\"tr-TR\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState();\n  const APIKEY = process.env.REACT_APP_API_KEY;\n  const values = {\n    lang,\n    setLang,\n    localSuf,\n    setLocalSuf,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData\n  };\n\n  function App() {\n    _s();\n\n    const langHandler = () => {\n      if (lang === \"tr\") {\n        setLang(\"en\");\n        setLocalSuf(\"en-EN\");\n      } else if (lang === \"en\") {\n        setLang(\"tr\");\n        setLocalSuf(\"tr-TR\");\n      }\n    };\n\n    const langText = lang.toUpperCase();\n    useEffect(() => {\n      getData(city, lang, APIKEY);\n    }, [city, lang]);\n    const todayData = weatherData;\n    const myDate = new Date();\n    console.log(\"This is it :\", myDate.toLocaleString({\n      localSuf\n    }, {\n      weekday: \"long\"\n    }));\n    return /*#__PURE__*/_jsxDEV(ForecastContext.Provider, {\n      value: values,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};\n\n_s2(ForecastProvider, \"twauGM0j/EbbaGJuQHudE2ef4z0=\");\n\n_c = ForecastProvider;\nexport default ForecastContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastProvider\");","map":{"version":3,"sources":["/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js"],"names":["createContext","useState","useEffect","ForecastContext","ForecastProvider","children","lang","setLang","localSuf","setLocalSuf","city","setCity","weatherData","setWeatherData","APIKEY","process","env","REACT_APP_API_KEY","values","App","langHandler","langText","toUpperCase","getData","todayData","myDate","Date","console","log","toLocaleString","weekday"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,MAAMC,eAAe,gBAAGH,aAAa,CAAC,IAAD,CAArC;AAEA,OAAO,MAAMI,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAAA;;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,OAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,EAA9C;AAEA,QAAMa,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;AAEA,QAAMC,MAAM,GAAG;AACbZ,IAAAA,IADa;AAEbC,IAAAA,OAFa;AAGbC,IAAAA,QAHa;AAIbC,IAAAA,WAJa;AAKbC,IAAAA,IALa;AAMbC,IAAAA,OANa;AAObC,IAAAA,WAPa;AAQbC,IAAAA;AARa,GAAf;;AAWA,WAASM,GAAT,GAAe;AAAA;;AACb,UAAMC,WAAW,GAAG,MAAM;AACxB,UAAId,IAAI,KAAK,IAAb,EAAmB;AACjBC,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,WAAW,CAAC,OAAD,CAAX;AACD,OAHD,MAGO,IAAIH,IAAI,KAAK,IAAb,EAAmB;AACxBC,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,WAAW,CAAC,OAAD,CAAX;AACD;AACF,KARD;;AAUA,UAAMY,QAAQ,GAAGf,IAAI,CAACgB,WAAL,EAAjB;AAEApB,IAAAA,SAAS,CAAC,MAAM;AACdqB,MAAAA,OAAO,CAACb,IAAD,EAAOJ,IAAP,EAAaQ,MAAb,CAAP;AACD,KAFQ,EAEN,CAACJ,IAAD,EAAOJ,IAAP,CAFM,CAAT;AAIA,UAAMkB,SAAS,GAAGZ,WAAlB;AAEA,UAAMa,MAAM,GAAG,IAAIC,IAAJ,EAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,cADF,EAEEH,MAAM,CAACI,cAAP,CACE;AAAErB,MAAAA;AAAF,KADF,EAEE;AACEsB,MAAAA,OAAO,EAAE;AADX,KAFF,CAFF;AAUA,wBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,MAAA,KAAK,EAAEZ,MAAjC;AAAA,gBACGb;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAtD+C,KAmBvCc,GAnBuC;AAuDjD,CAvDM;;IAAMf,gB;;KAAAA,gB;AAwDb,eAAeD,eAAf","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n\nconst ForecastContext = createContext(null);\n\nexport const ForecastProvider = ({ children }) => {\n  const [lang, setLang] = useState(\"tr\");\n  const [localSuf, setLocalSuf] = useState(\"tr-TR\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState();\n\n  const APIKEY = process.env.REACT_APP_API_KEY;\n\n  const values = {\n    lang,\n    setLang,\n    localSuf,\n    setLocalSuf,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData,\n  };\n\n  function App() {\n    const langHandler = () => {\n      if (lang === \"tr\") {\n        setLang(\"en\");\n        setLocalSuf(\"en-EN\");\n      } else if (lang === \"en\") {\n        setLang(\"tr\");\n        setLocalSuf(\"tr-TR\");\n      }\n    };\n\n    const langText = lang.toUpperCase();\n\n    useEffect(() => {\n      getData(city, lang, APIKEY);\n    }, [city, lang]);\n\n    const todayData = weatherData;\n\n    const myDate = new Date();\n    console.log(\n      \"This is it :\",\n      myDate.toLocaleString(\n        { localSuf },\n        {\n          weekday: \"long\",\n        }\n      )\n    );\n\n    return (\n      <ForecastContext.Provider value={values}>\n        {children}\n      </ForecastContext.Provider>\n    );\n  }\n};\nexport default ForecastContext;\n"]},"metadata":{},"sourceType":"module"}
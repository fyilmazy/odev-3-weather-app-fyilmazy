{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport { getData } from \"../Test\";\nexport const ForecastContext = /*#__PURE__*/createContext();\nexport const ForecastProvider = ({\n  children\n}) => {\n  _s();\n\n  const [lang, setLang] = useState(\"tr\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState([]);\n  const [cityDisplay, setCityDisplay] = useState(\"\");\n  const todayData = weatherData;\n\n  const langHandler = () => {\n    lang === \"tr\" ? setLang(\"en\") : setLang(\"tr\");\n  };\n\n  const daysEn = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const daysTr = [\"Pazar\", \"Pazartesi\", \"Salı\", \"Çarşamba\", \"Perşembe\", \"Cuma\", \"Cumartesi\"];\n  const dayCount = new Date();\n  const dayName = lang === \"tr\" ? daysTr[dayCount.getDay()] : daysEn[dayCount.getDay()];\n  const langText = lang.toUpperCase();\n  const values = {\n    lang,\n    setLang,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData,\n    langHandler,\n    langText,\n    todayData,\n    getData,\n    dayName,\n    cityDisplay,\n    setCityDisplay\n  };\n  useEffect(() => {\n    getData(city, lang).then(response => {\n      setWeatherData(response);\n      setLang(lang);\n    });\n  }, [city, lang]);\n  return /*#__PURE__*/_jsxDEV(ForecastContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForecastProvider, \"oCSfRRv9MsbnqUl0SHTqvPM+rPc=\");\n\n_c = ForecastProvider;\nexport default ForecastContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastProvider\");","map":{"version":3,"sources":["/Users/fahrettin/Desktop/weather-app/odev-3-weather-app-fyilmazy/weather-app/src/components/context/ForecastContext.js"],"names":["createContext","useState","useEffect","getData","ForecastContext","ForecastProvider","children","lang","setLang","city","setCity","weatherData","setWeatherData","cityDisplay","setCityDisplay","todayData","langHandler","daysEn","daysTr","dayCount","Date","dayName","getDay","langText","toUpperCase","values","then","response"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,EAArC;AAEP,OAAO,MAAMK,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMc,SAAS,GAAGJ,WAAlB;;AAEA,QAAMK,WAAW,GAAG,MAAM;AACxBT,IAAAA,IAAI,KAAK,IAAT,GAAgBC,OAAO,CAAC,IAAD,CAAvB,GAAgCA,OAAO,CAAC,IAAD,CAAvC;AACD,GAFD;;AAIA,QAAMS,MAAM,GAAG,CACb,QADa,EAEb,QAFa,EAGb,SAHa,EAIb,WAJa,EAKb,UALa,EAMb,QANa,EAOb,UAPa,CAAf;AASA,QAAMC,MAAM,GAAG,CACb,OADa,EAEb,WAFa,EAGb,MAHa,EAIb,UAJa,EAKb,UALa,EAMb,MANa,EAOb,WAPa,CAAf;AASA,QAAMC,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;AACA,QAAMC,OAAO,GACXd,IAAI,KAAK,IAAT,GAAgBW,MAAM,CAACC,QAAQ,CAACG,MAAT,EAAD,CAAtB,GAA4CL,MAAM,CAACE,QAAQ,CAACG,MAAT,EAAD,CADpD;AAGA,QAAMC,QAAQ,GAAGhB,IAAI,CAACiB,WAAL,EAAjB;AAEA,QAAMC,MAAM,GAAG;AACblB,IAAAA,IADa;AAEbC,IAAAA,OAFa;AAGbC,IAAAA,IAHa;AAIbC,IAAAA,OAJa;AAKbC,IAAAA,WALa;AAMbC,IAAAA,cANa;AAObI,IAAAA,WAPa;AAQbO,IAAAA,QARa;AASbR,IAAAA,SATa;AAUbZ,IAAAA,OAVa;AAWbkB,IAAAA,OAXa;AAYbR,IAAAA,WAZa;AAabC,IAAAA;AAba,GAAf;AAgBAZ,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACM,IAAD,EAAOF,IAAP,CAAP,CAAoBmB,IAApB,CAA0BC,QAAD,IAAc;AACrCf,MAAAA,cAAc,CAACe,QAAD,CAAd;AACAnB,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAHD;AAID,GALQ,EAKN,CAACE,IAAD,EAAOF,IAAP,CALM,CAAT;AAOA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEkB,MAAjC;AAAA,cACGnB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhEM;;GAAMD,gB;;KAAAA,gB;AAkEb,eAAeD,eAAf","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { getData } from \"../Test\";\nexport const ForecastContext = createContext();\n\nexport const ForecastProvider = ({ children }) => {\n  const [lang, setLang] = useState(\"tr\");\n  const [city, setCity] = useState(\"istanbul\");\n  const [weatherData, setWeatherData] = useState([]);\n  const [cityDisplay, setCityDisplay] = useState(\"\");\n\n  const todayData = weatherData;\n\n  const langHandler = () => {\n    lang === \"tr\" ? setLang(\"en\") : setLang(\"tr\");\n  };\n\n  const daysEn = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const daysTr = [\n    \"Pazar\",\n    \"Pazartesi\",\n    \"Salı\",\n    \"Çarşamba\",\n    \"Perşembe\",\n    \"Cuma\",\n    \"Cumartesi\",\n  ];\n  const dayCount = new Date();\n  const dayName =\n    lang === \"tr\" ? daysTr[dayCount.getDay()] : daysEn[dayCount.getDay()];\n\n  const langText = lang.toUpperCase();\n\n  const values = {\n    lang,\n    setLang,\n    city,\n    setCity,\n    weatherData,\n    setWeatherData,\n    langHandler,\n    langText,\n    todayData,\n    getData,\n    dayName,\n    cityDisplay,\n    setCityDisplay,\n  };\n\n  useEffect(() => {\n    getData(city, lang).then((response) => {\n      setWeatherData(response);\n      setLang(lang);\n    });\n  }, [city, lang]);\n\n  return (\n    <ForecastContext.Provider value={values}>\n      {children}\n    </ForecastContext.Provider>\n  );\n};\n\nexport default ForecastContext;\n"]},"metadata":{},"sourceType":"module"}